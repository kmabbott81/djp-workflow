[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "djp-workflow"
version = "1.1.0-dev"
description = "Debate-Judge-Publish workflow pipeline with grounded mode and redaction"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [{ name = "Kyle Abbott", email = "kmabbott81@users.noreply.github.com" }]
keywords = ["workflow", "agents", "debate", "grounding", "redaction", "observability"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    # agents package from OpenAI - install separately
    "pandas>=2.0.0",
    "ujson>=5.0.0",
    "jsonschema>=4.0.0",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dashboards = [
    "streamlit>=1.28.0",
    "plotly>=5.17.0",
]
pdf = [
    "pypdf>=3.0.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-anyio>=0.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.4.0",
    "pip-tools>=7.0.0",
    "build>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/kmabbott81/djp-workflow"
Documentation = "https://github.com/kmabbott81/djp-workflow/blob/main/docs/OPERATIONS.md"
Repository = "https://github.com/kmabbott81/djp-workflow"
Issues = "https://github.com/kmabbott81/djp-workflow/issues"

[project.scripts]
djp = "src.run_workflow:main"
djp-ui = "dashboards.app:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["src*", "dashboards*", "scripts*"]
exclude = ["tests*", "runs*", ".pytest_cache*"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.md"]

[tool.black]
line-length = 120
target-version = ['py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | _build
  | build
  | dist
  | runs
)/
'''

[tool.ruff]
line-length = 120
target-version = "py39"
exclude = [
    ".git",
    ".mypy_cache",
    ".pytest_cache",
    ".venv",
    "_build",
    "build",
    "dist",
    "runs",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "B905",  # zip without explicit strict parameter
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # unused imports ok in __init__

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Lenient for existing code
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
strict_optional = true
exclude = [
    "tests/",
    "runs/",
    ".venv/",
]

[[tool.mypy.overrides]]
module = [
    "agents.*",
    "ujson.*",
    "plotly.*",
    "streamlit.*",
    "pypdf.*",
    "sklearn.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]
