# =============================================================================
# OPENAI AGENTS WORKFLOWS - ENVIRONMENT CONFIGURATION
# =============================================================================
# This file documents all available environment variables for the system.
# Copy this file to .env and fill in your actual values.
# NEVER commit .env files with real credentials to version control.
# =============================================================================

# =============================================================================
# 1. CORE SYSTEM SETTINGS
# =============================================================================

# Environment mode: development, staging, production
ENV=development

# Tenant identifier for multi-tenancy support
TENANT_ID=default

# Bootstrap admin user email (created on first run)
BOOTSTRAP_ADMIN_USER=admin@example.com

# Logging level: DEBUG, INFO, WARNING, ERROR, CRITICAL
LOG_LEVEL=INFO

# Base paths for data storage
DATA_PATH=./data
LOGS_PATH=./logs
CACHE_PATH=./cache
TEMP_PATH=./temp

# =============================================================================
# 2. QUEUE & WORKER SETTINGS
# =============================================================================

# Redis connection URL for queue management
REDIS_URL=redis://localhost:6379/0

# Worker concurrency settings
WORKER_CONCURRENCY=4
MAX_WORKERS=10
MIN_WORKERS=1

# Task timeouts (in seconds)
TASK_TIMEOUT=300
LONG_TASK_TIMEOUT=1800
DEFAULT_TASK_TTL=3600

# Queue settings
QUEUE_MAX_SIZE=1000
QUEUE_POLL_INTERVAL=1

# Worker health check interval (seconds)
WORKER_HEALTH_CHECK_INTERVAL=30

# =============================================================================
# 3. BUDGET & COST MANAGEMENT
# =============================================================================

# Daily and monthly budget limits (in USD)
DAILY_BUDGET_LIMIT=100.00
MONTHLY_BUDGET_LIMIT=3000.00

# Per-tenant budget limits
TENANT_DAILY_BUDGET_LIMIT=50.00
TENANT_MONTHLY_BUDGET_LIMIT=1500.00

# Cost per operation (in USD)
COST_PER_API_CALL=0.01
COST_PER_TOKEN=0.00001
COST_PER_EMBEDDING=0.0001

# Budget alert thresholds (percentage)
BUDGET_WARNING_THRESHOLD=80
BUDGET_CRITICAL_THRESHOLD=95

# Budget tracking interval (seconds)
BUDGET_CHECK_INTERVAL=300

# =============================================================================
# 4. SECURITY & RBAC (Role-Based Access Control)
# =============================================================================

# JWT secret key for token generation (CHANGE THIS IN PRODUCTION!)
JWT_SECRET_KEY=your-super-secret-jwt-key-change-this-in-production

# Token expiration times (in seconds)
ACCESS_TOKEN_EXPIRE=3600
REFRESH_TOKEN_EXPIRE=604800

# Encryption key for sensitive data (32-byte base64 encoded)
ENCRYPTION_KEY=your-base64-encoded-32-byte-encryption-key-here

# RBAC configuration paths
TEAMS_CONFIG_PATH=./configs/teams.yaml
WORKSPACES_CONFIG_PATH=./configs/workspaces.yaml
DELEGATIONS_CONFIG_PATH=./configs/delegations.yaml
PERMISSIONS_CONFIG_PATH=./configs/permissions.yaml

# Password policy
MIN_PASSWORD_LENGTH=12
REQUIRE_SPECIAL_CHARS=true
REQUIRE_NUMBERS=true
REQUIRE_UPPERCASE=true

# Session settings
SESSION_TIMEOUT=1800
MAX_CONCURRENT_SESSIONS=3

# =============================================================================
# 5. RATE LIMITING
# =============================================================================

# Global rate limits (queries per second)
GLOBAL_QPS_LIMIT=100
GLOBAL_QPM_LIMIT=6000
GLOBAL_QPH_LIMIT=360000

# Team-level rate limits
TEAM_QPS_LIMIT=10
TEAM_QPM_LIMIT=600

# Tenant-level rate limits
TENANT_QPS_LIMIT=50
TENANT_QPM_LIMIT=3000

# User-level rate limits
USER_QPS_LIMIT=5
USER_QPM_LIMIT=300

# Rate limit window (seconds)
RATE_LIMIT_WINDOW=60

# Rate limit storage backend: memory, redis
RATE_LIMIT_STORAGE=redis

# =============================================================================
# 6. MICROSOFT TEAMS CONNECTOR
# =============================================================================

# Microsoft Teams OAuth2 Configuration
TEAMS_CLIENT_ID=your-microsoft-teams-client-id
TEAMS_CLIENT_SECRET=your-microsoft-teams-client-secret
TEAMS_TENANT_ID=your-microsoft-tenant-id

# OAuth2 endpoints
TEAMS_AUTHORITY=https://login.microsoftonline.com
TEAMS_SCOPE=https://graph.microsoft.com/.default

# Token storage
TEAMS_TOKEN_PATH=./data/tokens/teams_token.json

# API settings
TEAMS_API_VERSION=v1.0
TEAMS_BASE_URL=https://graph.microsoft.com/v1.0

# Retry and timeout settings
TEAMS_MAX_RETRIES=3
TEAMS_TIMEOUT=30
TEAMS_BACKOFF_FACTOR=2

# Dry run mode (set to true to prevent actual API calls)
TEAMS_DRY_RUN=false

# Webhook settings
TEAMS_WEBHOOK_URL=
TEAMS_WEBHOOK_SECRET=

# =============================================================================
# 7. MICROSOFT OUTLOOK CONNECTOR
# =============================================================================

# Microsoft Outlook OAuth2 Configuration
OUTLOOK_CLIENT_ID=your-microsoft-outlook-client-id
OUTLOOK_CLIENT_SECRET=your-microsoft-outlook-client-secret
OUTLOOK_TENANT_ID=your-microsoft-tenant-id

# OAuth2 endpoints
OUTLOOK_AUTHORITY=https://login.microsoftonline.com
OUTLOOK_SCOPE=https://graph.microsoft.com/.default

# Token storage
OUTLOOK_TOKEN_PATH=./data/tokens/outlook_token.json

# API settings
OUTLOOK_API_VERSION=v1.0
OUTLOOK_BASE_URL=https://graph.microsoft.com/v1.0

# Mail settings
OUTLOOK_MAX_RESULTS=50
OUTLOOK_SYNC_INTERVAL=300

# Retry and timeout settings
OUTLOOK_MAX_RETRIES=3
OUTLOOK_TIMEOUT=30
OUTLOOK_BACKOFF_FACTOR=2

# Dry run mode (set to true to prevent actual API calls)
OUTLOOK_DRY_RUN=false

# =============================================================================
# 8. SLACK CONNECTOR
# =============================================================================

# Slack OAuth2 Configuration
SLACK_CLIENT_ID=your-slack-client-id
SLACK_CLIENT_SECRET=your-slack-client-secret
SLACK_BOT_TOKEN=xoxb-your-slack-bot-token
SLACK_USER_TOKEN=xoxp-your-slack-user-token

# Slack App Configuration
SLACK_APP_ID=your-slack-app-id
SLACK_SIGNING_SECRET=your-slack-signing-secret
SLACK_VERIFICATION_TOKEN=your-slack-verification-token

# OAuth2 settings
SLACK_REDIRECT_URI=http://localhost:8000/auth/slack/callback
SLACK_SCOPE=channels:read,chat:write,users:read,files:read

# API settings
SLACK_API_BASE_URL=https://slack.com/api

# Circuit breaker settings
SLACK_CIRCUIT_BREAKER_THRESHOLD=5
SLACK_CIRCUIT_BREAKER_TIMEOUT=60
SLACK_CIRCUIT_BREAKER_RECOVERY_TIMEOUT=300

# Retry settings
SLACK_MAX_RETRIES=3
SLACK_RETRY_DELAY=1
SLACK_RETRY_BACKOFF=2
SLACK_TIMEOUT=30

# Rate limiting (Slack has tier-based rate limits)
SLACK_RATE_LIMIT_TIER=tier2
SLACK_RATE_LIMIT_BUFFER=0.8

# Dry run mode (set to true to prevent actual API calls)
SLACK_DRY_RUN=false

# WebSocket settings
SLACK_SOCKET_MODE_ENABLED=false
SLACK_APP_LEVEL_TOKEN=xapp-your-app-level-token

# =============================================================================
# 9. GMAIL CONNECTOR
# =============================================================================

# Gmail OAuth2 Configuration
GMAIL_CLIENT_ID=your-gmail-client-id.apps.googleusercontent.com
GMAIL_CLIENT_SECRET=your-gmail-client-secret
GMAIL_PROJECT_ID=your-google-cloud-project-id

# OAuth2 settings
GMAIL_REDIRECT_URI=http://localhost:8000/auth/gmail/callback
GMAIL_SCOPE=https://www.googleapis.com/auth/gmail.modify

# Credentials and token storage
GMAIL_CREDENTIALS_PATH=./data/credentials/gmail_credentials.json
GMAIL_TOKEN_PATH=./data/tokens/gmail_token.json

# API settings
GMAIL_API_VERSION=v1
GMAIL_MAX_RESULTS=100

# Sync settings
GMAIL_SYNC_INTERVAL=300
GMAIL_HISTORY_SYNC_ENABLED=true

# Retry and timeout settings
GMAIL_MAX_RETRIES=3
GMAIL_TIMEOUT=30
GMAIL_BACKOFF_FACTOR=2

# Dry run mode (set to true to prevent actual API calls)
GMAIL_DRY_RUN=false

# Label settings
GMAIL_AUTO_LABEL=true
GMAIL_PROCESSED_LABEL=Processed

# =============================================================================
# 10. NOTION CONNECTOR
# =============================================================================

# Notion Integration Token
NOTION_TOKEN=secret_your-notion-integration-token

# Notion API settings
NOTION_API_VERSION=2022-06-28
NOTION_BASE_URL=https://api.notion.com/v1

# Database and page settings
NOTION_DATABASE_ID=your-notion-database-id
NOTION_DEFAULT_PAGE_SIZE=100

# Retry and timeout settings
NOTION_MAX_RETRIES=3
NOTION_TIMEOUT=30
NOTION_BACKOFF_FACTOR=2

# Rate limiting
NOTION_RATE_LIMIT_PER_SECOND=3

# Dry run mode (set to true to prevent actual API calls)
NOTION_DRY_RUN=false

# Sync settings
NOTION_SYNC_INTERVAL=600
NOTION_ENABLE_WEBHOOKS=false

# =============================================================================
# 11. URG (Universal Resource Graph) SETTINGS
# =============================================================================

# URG storage configuration
URG_STORE_PATH=./data/urg_store
URG_CACHE_SIZE=10000
URG_ENABLE_PERSISTENCE=true

# Graph database settings
URG_DB_TYPE=neo4j
URG_DB_URI=bolt://localhost:7687
URG_DB_USER=neo4j
URG_DB_PASSWORD=your-neo4j-password

# Search configuration
URG_SEARCH_MAX_DEPTH=5
URG_SEARCH_MAX_RESULTS=100
URG_ENABLE_FUZZY_SEARCH=true
URG_FUZZY_THRESHOLD=0.8

# Indexing settings
URG_AUTO_INDEX=true
URG_INDEX_INTERVAL=3600
URG_BATCH_SIZE=1000

# Graph analysis settings
URG_ENABLE_ANALYTICS=true
URG_COMPUTE_CENTRALITY=true
URG_COMPUTE_COMMUNITIES=true

# =============================================================================
# 12. NATURAL LANGUAGE SETTINGS
# =============================================================================

# NLP model configuration
NLP_MODEL_PROVIDER=openai
NLP_MODEL_NAME=gpt-4
NLP_EMBEDDING_MODEL=text-embedding-3-small

# OpenAI API settings
OPENAI_API_KEY=sk-your-openai-api-key
OPENAI_ORG_ID=org-your-organization-id
OPENAI_API_BASE=https://api.openai.com/v1

# Model parameters
NLP_MAX_TOKENS=4096
NLP_TEMPERATURE=0.7
NLP_TOP_P=1.0
NLP_FREQUENCY_PENALTY=0.0
NLP_PRESENCE_PENALTY=0.0

# Risk thresholds for content analysis
NLP_RISK_THRESHOLD_LOW=0.3
NLP_RISK_THRESHOLD_MEDIUM=0.6
NLP_RISK_THRESHOLD_HIGH=0.8

# Intent classification confidence threshold
NLP_INTENT_CONFIDENCE_THRESHOLD=0.7

# Trusted domains for link analysis
NLP_TRUSTED_DOMAINS=example.com,trusted-site.com,corporate-domain.com

# Content filtering
NLP_ENABLE_CONTENT_FILTER=true
NLP_ENABLE_PII_DETECTION=true

# Caching for embeddings and responses
NLP_ENABLE_CACHE=true
NLP_CACHE_TTL=86400

# =============================================================================
# 13. HEALTH & MONITORING
# =============================================================================

# Health check settings
HEALTH_CHECK_ENABLED=true
HEALTH_CHECK_PORT=8080
HEALTH_CHECK_PATH=/health

# Liveness probe settings
LIVENESS_PROBE_INTERVAL=30
LIVENESS_PROBE_TIMEOUT=5
LIVENESS_PROBE_FAILURE_THRESHOLD=3

# Readiness probe settings
READINESS_PROBE_INTERVAL=10
READINESS_PROBE_TIMEOUT=5
READINESS_PROBE_FAILURE_THRESHOLD=3

# Metrics settings
METRICS_ENABLED=true
METRICS_PORT=9090
METRICS_PATH=/metrics
METRICS_PROVIDER=prometheus

# Distributed tracing
TRACING_ENABLED=true
TRACING_PROVIDER=jaeger
JAEGER_AGENT_HOST=localhost
JAEGER_AGENT_PORT=6831
JAEGER_SAMPLER_TYPE=probabilistic
JAEGER_SAMPLER_PARAM=0.1

# Logging and monitoring
SENTRY_DSN=
SENTRY_ENVIRONMENT=development
SENTRY_TRACES_SAMPLE_RATE=0.1

# Performance monitoring
ENABLE_PROFILING=false
PROFILING_INTERVAL=60

# =============================================================================
# 14. DASHBOARD SETTINGS
# =============================================================================

# Dashboard server settings
DASHBOARD_ENABLED=true
DASHBOARD_HOST=0.0.0.0
DASHBOARD_PORT=3000

# Dashboard configuration
DASHBOARD_TITLE=OpenAI Agents Workflows
DASHBOARD_REFRESH_INTERVAL=30

# Authentication for dashboard
DASHBOARD_AUTH_ENABLED=true
DASHBOARD_USERNAME=admin
DASHBOARD_PASSWORD=change-this-password

# Dashboard features
DASHBOARD_SHOW_METRICS=true
DASHBOARD_SHOW_LOGS=true
DASHBOARD_SHOW_TASKS=true
DASHBOARD_SHOW_BUDGETS=true

# Data retention for dashboard
DASHBOARD_METRICS_RETENTION_DAYS=30
DASHBOARD_LOGS_RETENTION_DAYS=7

# =============================================================================
# 15. ADVANCED FEATURES
# =============================================================================

# Multi-region support
MULTI_REGION_ENABLED=false
PRIMARY_REGION=us-east-1
SECONDARY_REGIONS=us-west-2,eu-west-1

# Blue-green deployment
BLUE_GREEN_ENABLED=false
CURRENT_ENVIRONMENT=blue
TRAFFIC_SPLIT=100

# Feature flags
FEATURE_FLAG_PROVIDER=local
FEATURE_FLAG_REFRESH_INTERVAL=300

# Specific feature flags
ENABLE_EXPERIMENTAL_FEATURES=false
ENABLE_A_B_TESTING=false
ENABLE_CANARY_RELEASES=false

# Auto-scaling settings
AUTO_SCALING_ENABLED=false
MIN_INSTANCES=1
MAX_INSTANCES=10
SCALE_UP_THRESHOLD=80
SCALE_DOWN_THRESHOLD=20

# Disaster recovery
BACKUP_ENABLED=true
BACKUP_INTERVAL=86400
BACKUP_RETENTION_DAYS=30
BACKUP_PATH=./backups

# Circuit breaker (global)
CIRCUIT_BREAKER_ENABLED=true
CIRCUIT_BREAKER_FAILURE_THRESHOLD=5
CIRCUIT_BREAKER_RECOVERY_TIMEOUT=60

# =============================================================================
# 16. OPTIONAL DATABASE AND EXTERNAL INTEGRATIONS
# =============================================================================

# PostgreSQL (optional primary database)
DATABASE_TYPE=postgresql
DATABASE_HOST=localhost
DATABASE_PORT=5432
DATABASE_NAME=agents_workflows
DATABASE_USER=postgres
DATABASE_PASSWORD=your-postgres-password
DATABASE_SSL_MODE=prefer
DATABASE_POOL_SIZE=20
DATABASE_MAX_OVERFLOW=10

# MongoDB (optional document store)
MONGODB_URI=mongodb://localhost:27017
MONGODB_DATABASE=agents_workflows
MONGODB_MAX_POOL_SIZE=50

# Elasticsearch (optional for advanced search)
ELASTICSEARCH_ENABLED=false
ELASTICSEARCH_HOST=localhost
ELASTICSEARCH_PORT=9200
ELASTICSEARCH_USERNAME=elastic
ELASTICSEARCH_PASSWORD=your-elastic-password
ELASTICSEARCH_INDEX_PREFIX=agents_workflows

# RabbitMQ (alternative to Redis for messaging)
RABBITMQ_ENABLED=false
RABBITMQ_HOST=localhost
RABBITMQ_PORT=5672
RABBITMQ_USER=guest
RABBITMQ_PASSWORD=guest
RABBITMQ_VHOST=/

# AWS Integration (optional)
AWS_ENABLED=false
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=your-aws-access-key
AWS_SECRET_ACCESS_KEY=your-aws-secret-key
AWS_S3_BUCKET=your-s3-bucket-name

# Azure Integration (optional)
AZURE_ENABLED=false
AZURE_SUBSCRIPTION_ID=your-azure-subscription-id
AZURE_RESOURCE_GROUP=your-resource-group
AZURE_STORAGE_ACCOUNT=your-storage-account
AZURE_STORAGE_KEY=your-storage-key

# Google Cloud Integration (optional)
GCP_ENABLED=false
GCP_PROJECT_ID=your-gcp-project-id
GCP_CREDENTIALS_PATH=./data/credentials/gcp_credentials.json
GCP_BUCKET_NAME=your-gcs-bucket-name

# Webhook notifications
WEBHOOK_ENABLED=false
WEBHOOK_URL=https://your-webhook-endpoint.com/notify
WEBHOOK_SECRET=your-webhook-secret
WEBHOOK_EVENTS=task.completed,task.failed,budget.exceeded

# Email notifications (SMTP)
EMAIL_ENABLED=false
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@example.com
SMTP_PASSWORD=your-email-password
SMTP_FROM_ADDRESS=noreply@example.com
SMTP_USE_TLS=true

# =============================================================================
# 14. OBSERVABILITY & TELEMETRY
# =============================================================================

# Telemetry toggle (noop stub for future OTel/Prometheus integration)
# When enabled, logs a startup message; no backend implemented yet
# Default: false (disabled, zero overhead)
TELEMETRY_ENABLED=false

# =============================================================================
# END OF CONFIGURATION
# =============================================================================


# =============================================================================
# STAGING ENVIRONMENT CONFIGURATION
# =============================================================================
# Example configuration for staging deployment (Railway, Render, etc.)
# Set these in your platform's environment variables dashboard

# Environment mode
APP_ENV=staging

# Telemetry configuration (Sprint 46-47: Prometheus + OpenTelemetry)
TELEMETRY_ENABLED=true
TELEMETRY_BACKEND=hybrid    # prom + otel (recommended for production-like environments)

# OpenTelemetry tracing configuration
OTEL_EXPORTER=console        # console (dev/CI) | otlp (staging/prod) | none
OTEL_ENDPOINT=               # Set when using OTLP: http://tempo:4318 (HTTP) or http://tempo:4317 (gRPC)
OTEL_SERVICE_NAME=djp-workflow-staging
OTEL_TRACE_SAMPLE=0.05       # 5% sampling for staging (balance between cost and visibility)

# Prometheus metrics configuration
# Metrics available at /metrics endpoint (when TELEMETRY_ENABLED=true and backend=prom|hybrid)
# Configure your Prometheus server to scrape: https://<your-staging-host>/metrics

# =============================================================================
# 15. OBSERVABILITY TOOLS (Grafana + Prometheus)
# =============================================================================

# Grafana API key for automated dashboard imports
# Get from: Grafana UI → Administration → Users and access → Service accounts → Add service account
# Role: Editor or Admin
GRAFANA_API_KEY=glsa_your_grafana_api_key_here

# Grafana URL (default: http://localhost:3000)
GRAFANA_URL=http://localhost:3000

# Prometheus URL (default: http://localhost:9090)
PROM_URL=http://localhost:9090

# Docker container names (if using Docker deployment)
PROM_CONTAINER=prom
GRAFANA_CONTAINER=grafana
