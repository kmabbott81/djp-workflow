name: DJP Pipeline CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  validate:
    runs-on: ubuntu-latest
    env:
      FEATURE_RBAC_ENFORCE: "true"
      FEATURE_BUDGETS: "true"
      PYTHONUNBUFFERED: "1"
    strategy:
      matrix:
        python-version: ['3.11']  # PR: single version for speed

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Cache pytest
      uses: actions/cache@v3
      with:
        path: .pytest_cache
        key: pytest-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('tests/**/*.py') }}
        restore-keys: |
          pytest-${{ runner.os }}-${{ matrix.python-version }}-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-xdist jsonschema ujson pip-audit
        pip install -e ".[dev]"
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install openai-agents || true

    - name: Dependency audit (non-blocking)
      continue-on-error: true
      run: |
        pip-audit || echo "::warning::pip-audit found vulnerabilities (non-blocking on PR)"

    - name: Run unit tests (fast subset)
      run: |
        python -m pytest tests/ -v --ignore=tests_e2e -m "not slow and not integration and not requires_streamlit and not needs_artifacts and not port_conflict and not api_mismatch and not bizlogic_asserts" -n auto || python -m pytest tests/ -v --ignore=tests_e2e -m "not slow and not integration and not requires_streamlit and not needs_artifacts and not port_conflict and not api_mismatch and not bizlogic_asserts"

    - name: Run e2e smoke tests
      run: |
        python -m pytest -m e2e -v

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-py${{ matrix.python-version }}
        path: |
          .pytest_cache
          **/*SPRINT*-COMPLETE.md
        if-no-files-found: warn

  docker:
    runs-on: ubuntu-latest
    needs: validate
    env:
      FEATURE_RBAC_ENFORCE: "true"
      PYTHONUNBUFFERED: "1"

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build app image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.app
        tags: djp-workflow-app:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        push: false

    - name: Build worker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile.worker
        tags: djp-workflow-worker:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
        push: false

    - name: Test Docker Compose config
      run: |
        docker-compose -f docker/docker-compose.yml config

    - name: Upload release artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: release-notes
        path: |
          CHANGELOG.md
          docs/RELEASE_PROCESS.md
          docker/docker-compose.yml
        if-no-files-found: warn
