name: Nightly Performance Baseline

on:
  schedule:
    # Every night at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

permissions:
  contents: read
  issues: write

jobs:
  performance-baseline:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    continue-on-error: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install requests

      - name: Generate traffic and measure performance
        id: perf
        run: |
          python3 << 'EOF'
          import requests
          import time
          import json
          import statistics
          from datetime import datetime

          BASE_URL = "https://relay-production-f2a6.up.railway.app"
          ENDPOINTS = [
              "/_stcore/health",
              "/api/templates",
              "/metrics",
              "/version",
          ]

          results = {}

          for endpoint in ENDPOINTS:
              url = f"{BASE_URL}{endpoint}"
              durations = []
              status_codes = []
              errors = 0

              print(f"\n=== Testing {endpoint} ===")

              for i in range(30):
                  try:
                      start = time.time()
                      response = requests.get(url, timeout=10)
                      duration = (time.time() - start) * 1000  # Convert to ms

                      durations.append(duration)
                      status_codes.append(response.status_code)

                      if response.status_code >= 500:
                          errors += 1

                      print(f"[{i+1}/30] {response.status_code} - {duration:.2f}ms")

                      time.sleep(2)  # 2 second interval
                  except Exception as e:
                      errors += 1
                      print(f"[{i+1}/30] ERROR: {e}")
                      time.sleep(2)

              if durations:
                  results[endpoint] = {
                      "p50_ms": round(statistics.median(durations), 2),
                      "p95_ms": round(statistics.quantiles(durations, n=20)[18], 2),
                      "p99_ms": round(max(durations), 2),
                      "mean_ms": round(statistics.mean(durations), 2),
                      "error_count": errors,
                      "error_rate_pct": round((errors / 30) * 100, 2),
                      "total_requests": 30,
                  }

          # Save baseline
          baseline = {
              "timestamp": datetime.utcnow().isoformat(),
              "results": results,
          }

          with open("baseline.json", "w") as f:
              json.dump(baseline, f, indent=2)

          print("\n=== Performance Baseline ===")
          print(json.dumps(baseline, indent=2))

          # Check for degradation
          degraded = []
          for endpoint, metrics in results.items():
              if metrics["p95_ms"] > 500:
                  degraded.append(f"{endpoint}: P95={metrics['p95_ms']}ms (threshold: 500ms)")
              if metrics["p99_ms"] > 1000:
                  degraded.append(f"{endpoint}: P99={metrics['p99_ms']}ms (threshold: 1000ms)")
              if metrics["error_rate_pct"] > 1:
                  degraded.append(f"{endpoint}: Error rate={metrics['error_rate_pct']}% (threshold: 1%)")

          if degraded:
              print("\n‚ö†Ô∏è Performance degradation detected:")
              for item in degraded:
                  print(f"  - {item}")
              with open("degraded.txt", "w") as f:
                  f.write("\n".join(degraded))
          else:
              print("\n‚úÖ All metrics within acceptable ranges")

          EOF

      - name: Upload baseline artifact
        uses: actions/upload-artifact@v4
        with:
          name: perf-baseline-${{ github.run_number }}
          path: baseline.json
          retention-days: 30

      - name: Check for performance degradation
        id: check_degradation
        run: |
          if [ -f degraded.txt ]; then
            echo "degraded=true" >> $GITHUB_OUTPUT
            cat degraded.txt
          else
            echo "degraded=false" >> $GITHUB_OUTPUT
          fi

      - name: Create performance degradation issue
        if: steps.check_degradation.outputs.degraded == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const degraded = fs.readFileSync('degraded.txt', 'utf8');
            const baseline = JSON.parse(fs.readFileSync('baseline.json', 'utf8'));

            const title = '‚ö†Ô∏è Performance Degradation Detected';
            const body = `
            ## Performance Baseline Alert

            **Date:** ${new Date().toISOString()}
            **Environment:** Railway Staging

            ### Degraded Metrics
            \`\`\`
            ${degraded}
            \`\`\`

            ### Full Baseline Results
            \`\`\`json
            ${JSON.stringify(baseline, null, 2)}
            \`\`\`

            ### Action Required
            1. Review recent deployments
            2. Check Railway resource limits
            3. Investigate slow endpoints
            4. Review Grafana dashboards for anomalies

            ### Thresholds
            - P95 latency: < 500ms
            - P99 latency: < 1s
            - Error rate: < 1%

            [View workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId})
            `;

            // Check if issue exists
            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'performance-degradation',
              per_page: 1
            });

            if (issues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['performance-degradation', 'staging']
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issues.data[0].number,
                body: `Performance degradation still detected at ${new Date().toISOString()}\n\n[View run](${context.payload.repository.html_url}/actions/runs/${context.runId})`
              });
            }

      - name: Comment baseline summary
        if: success()
        run: |
          echo "‚úÖ Nightly performance baseline completed"
          echo "üìä Artifact: perf-baseline-${{ github.run_number }}"
