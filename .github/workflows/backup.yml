name: Database Backup

on:
  schedule:
    # Run daily at 09:00 UTC
    - cron: '0 9 * * *'
  workflow_dispatch:  # Allow manual trigger

jobs:
  backup:
    if: ${{ vars.BACKUP_ENABLED == 'true' }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install psycopg2-binary

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Create backup directory
        run: |
          mkdir -p /tmp/backups

      - name: Run database backup
        env:
          DATABASE_PUBLIC_URL: ${{ secrets.DATABASE_PUBLIC_URL }}
        run: |
          python scripts/db_backup.py --output-dir /tmp/backups --retention-days 30

      - name: Upload backup artifact
        uses: actions/upload-artifact@v4
        with:
          name: db-backup-${{ github.run_id }}
          path: /tmp/backups/**/*.sql.gz
          retention-days: 30

      - name: Notify on failure
        if: failure()
        run: |
          echo "::error::Database backup failed. Check logs."

  restore-drill:
    if: ${{ vars.BACKUP_ENABLED == 'true' && (github.event_name == 'workflow_dispatch' || (github.event.schedule == '0 9 * * *' && github.run_number % 30 == 1)) }}
    runs-on: ubuntu-latest
    needs: backup

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install psycopg2-binary

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Download backup artifact
        uses: actions/download-artifact@v4
        with:
          name: db-backup-${{ github.run_id }}
          path: /tmp/backups

      - name: Run restore drill
        env:
          DATABASE_PUBLIC_URL: ${{ secrets.DATABASE_PUBLIC_URL }}
        run: |
          python scripts/db_restore_check.py --backup-dir /tmp/backups

      - name: Upload restore report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: restore-drill-report-${{ github.run_id }}
          path: docs/evidence/sprint-51/phase3/RESTORE-DRILL-REPORT.md
          retention-days: 90

      - name: Commit restore report
        if: success()
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/evidence/sprint-51/phase3/RESTORE-DRILL-REPORT.md || true
          git commit -m "ci: add monthly restore drill report [skip ci]" || true
          git push || true
